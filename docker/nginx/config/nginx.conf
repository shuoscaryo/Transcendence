events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

	log_format nginx '[$time_local] "$request" '
                      '$status $body_bytes_sent';

    # Habilita el acceso log
    access_log /dev/stdout nginx;

    # Bloque para HTTPS
    server {
        listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/transcendence.crt;
        ssl_certificate_key /etc/nginx/ssl/transcendence.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        server_name transcendence.42;

        # Servir archivos estáticos desde /app/static
        location /static/ {
            alias /app/static/;
        }

        # Try to serve page/view.js, if not found, try to serve page/view/index.js
        location ~ ^/static/js/pages/([^/]+)/views/([^/]+)$ {
            root /app/;
            try_files /static/js/pages/$1/views/$2.js @redirect_to_index;
            types { application/javascript js; }
        }
        # Second part of the above location
        location @redirect_to_index {
            rewrite ^/static/js/pages/([^/]+)/views/([^/]+)$ /static/js/pages/$1/views/$2/index.js permanent;
        }

        location /media/ {
            alias /app/media/;
        }

        # Proxy a Django (asumiendo que corre en 0.0.0.0:8000)
        location / {
            proxy_pass http://django:8000;  # Ajusta 'django' al nombre del servicio en docker-compose
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

		# Soporte para WebSockets (wss)
        location /ws/ {
            proxy_pass http://django:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Bloque para redirección de HTTP a HTTPS
    server {
        listen 80;
        server_name orudek.42.fr;
        return 301 https://$host$request_uri;
    }
}